paths:
    /auth/create-partial-user:
        post:
            tags: [Auth]
            summary: Create a partial user
            description: Creates a new partial user for getting started with the registration process.
            requestBody:
                description: Partial user details
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/PartialUserRequest'
            responses:
                '201':
                    description: Partial user created successfully
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/PartialUserResponse'
                '409':
                    $ref: '#/components/responses/Conflict'
                '500':
                    $ref: '#/components/responses/InternalServerError'

    /auth/email-verification:
        post:
            tags: [Auth]
            summary: Verified User Email
            description: Completes the registration process by creating a new user.
            requestBody:
                description: User registration details
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/EmailVerificationRequest'
            responses:
                '201':
                    description: User created successfully
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/EmailVerificationResponse'
                '401':
                    $ref: '#/components/responses/Unauthorized'
                '409':
                    $ref: '#/components/responses/Conflict'
                '500':
                    $ref: '#/components/responses/InternalServerError'

    /auth/login:
        post:
            tags: [Auth]
            summary: Login user
            description: Authenticates a user and returns access and refresh tokens.
            requestBody:
                description: User login credentials
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/UserLoginRequest'
            responses:
                '200':
                    description: User logged in successfully
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UserLoginResponse'
                    headers:
                        Set-Cookie:
                            description: Set Refresh Token Cookie
                            schema:
                                type: string
                                format: jwt
                                example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2MzgxOTUyMDB9.uDzM3vZf43gCkUz_0
                '401':
                    $ref: '#/components/responses/Unauthorized'
                '404':
                    $ref: '#/components/responses/NotFound'
                '500':
                    $ref: '#/components/responses/InternalServerError'
    /auth/add-seller-info:
        post:
            tags: [Auth]
            summary: Add Seller info
            description: Add seller info to his profile after email verification.
            requestBody:
                description: Info
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/SellerInfoRequest'
            responses:
                '201':
                    description: Seller account created successfully
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/responses/SellerInfoAdded'
                '422':
                    $ref: '#/components/responses/RoleIsNotSeller'
                '401':
                    $ref: '#/components/responses/UserIsNotVerified'

    /auth/add-buyer-info:
        post:
            tags: [Auth]
            summary: Add Buyer info
            description: Add buyer info to his profile after email verification.
            requestBody:
                description: Info
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/BuyerInfoRequest'
            responses:
                '201':
                    description: Buyer account created successfully
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/responses/BuyerInfoAdded'
                '422':
                    $ref: '#/components/responses/RoleIsNotBuyer'
                '401':
                    $ref: '#/components/responses/UserIsNotVerified'

    /auth/refresh-token:
        get:
            tags: [Auth]
            summary: Refresh the user's access token
            description: Refreshes the user's access token using the refresh token stored in cookies.
            responses:
                '200':
                    description: Token refreshed successfully
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UserLoginResponse'
                '401':
                    $ref: '#/components/responses/Unauthorized'
                '500':
                    $ref: '#/components/responses/InternalServerError'
            security:
                - cookieAuth: []

    /auth/forget-password-otp-send:
        post:
            tags: [Auth]
            summary: Send OTP for Forget Password
            description: Sends an OTP code to the user's email for password reset verification.
            requestBody:
                description: User email for OTP sending
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ForgetPasswordOtpSendRequest'
            responses:
                '200':
                    description: OTP sent successfully
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UserResponse'
                '404':
                    $ref: '#/components/responses/NotFound'
                '409':
                    $ref: '#/components/responses/Conflict'
                '500':
                    $ref: '#/components/responses/InternalServerError'

    /auth/forget-password:
        post:
            tags: [Auth]
            summary: Forget Password
            description: Resets the user's password using the provided verification code and new password.
            requestBody:
                description: Password reset details
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ForgetPasswordRequest'
            responses:
                '200':
                    description: Password reset successfully
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UserResponse'
                '401':
                    $ref: '#/components/responses/Unauthorized'
                '404':
                    $ref: '#/components/responses/NotFound'
                '409':
                    $ref: '#/components/responses/Conflict'
                '500':
                    $ref: '#/components/responses/InternalServerError'

components:
    schemas:
        PartialUserRequest:
            type: object
            properties:
                email:
                    type: string
                    format: email
                    example: user@mail.com
                fullName:
                    type: string
                    example: John Doe
                phoneNumber:
                    type: string
                    example: '01712345678'
                password:
                    type: string
                    format: password
                    example: PassWord123@
                confirmPassword:
                    type: string
                    format: password
                    example: PassWord123@
                role:
                    type: string,
                    enum: ['business', 'personal', 'admin']
                    example: 'business'
            required: [email, firstName, lastName, phoneNumber, role, password, confirmPassword]

        PartialUserResponse:
            type: object
            properties:
                id:
                    type: string
                    format: uuid
                    example: 123e4567-e89b-12d3-a456-426614174000
                email:
                    type: string
                    format: email
                    example: user@mail.com
                fullName:
                    type: string
                    example: John Doe
                phoneNumber:
                    type: string
                    example: '01712345678'
                role:
                    type: string
                    example: user
                emailVerificationCode:
                    type: string
                    example: '123456'
                emailVerificationExpiresAt:
                    type: string
                    format: date-time
                    example: 2024-08-01T12:00:00Z

        EmailVerificationRequest:
            type: object
            properties:
                email:
                    type: string
                    format: email
                    example: user@mail.com
                emailVerificationCode:
                    type: string
                    example: '123456'
            required: [email, emailVerificationCode]

        EmailVerificationResponse:
            type: object
            properties:
                id:
                    type: string
                    format: uuid
                    example: 5f9b3b3b9b0b7c0017e2b3a5
                role:
                    type: string
                    example: business
                isVerified:
                    type: boolean
                    example: true

        UserLoginRequest:
            type: object
            properties:
                email:
                    type: string
                    format: email
                    example: user@mail.com
                password:
                    type: string
                    format: password
                    example: PassWord123
            required: [email, password]

        SellerInfoRequest:
            type: object
            properties:
                email:
                    type: string
                    format: email
                    example: 'seller@example.com'
                    description: "Seller's email address"
                address:
                    type: string
                    minLength: 3
                    maxLength: 100
                    example: '123 Seller Ave'
                    description: 'Address of the seller'
                city:
                    type: string
                    minLength: 3
                    maxLength: 100
                    example: 'New York'
                    description: 'City where the seller sells products'
                state:
                    type: string
                    minLength: 3
                    maxLength: 100
                    example: 'Ohio'
                    description: 'State where the seller sells products'
                dateOfBirth:
                    type: string
                    format: date
                    example: '1985-05-15'
                    description: 'Date of birth of the seller'
                gender:
                    type: string
                    minLength: 1
                    maxLength: 10
                    example: 'Female'
                    description: 'Gender of the seller'
            required: [email, address, city, state, dateOfBirth, gender]

        BuyerInfoRequest:
            type: object
            properties:
                email:
                    type: string
                    format: email
                    description: Email of the buyer
                    example: 'buyer@example.com'
                address:
                    type: string
                    description: Address of the buyer
                    minLength: 3
                    maxLength: 100
                    example: '456 Elm Street'
                city:
                    type: string
                    description: City where the buyer resides
                    minLength: 3
                    maxLength: 100
                    example: 'New York'
                state:
                    type: string
                    description: State where the buyer resides
                    minLength: 3
                    maxLength: 100
                    example: 'New York'
                dateOfBirth:
                    type: string
                    format: date
                    description: Date of birth of the buyer
                    example: '1985-12-15'
                gender:
                    type: string
                    description: Gender of the buyer
                    minLength: 1
                    maxLength: 10
                    example: 'Female'
            required:
                - email
                - address
                - city
                - state
                - dateOfBirth
                - gender

        UserLoginResponse:
            type: object
            properties:
                accessToken:
                    type: string
                    format: jwt
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2MzgxOTUyMDB9.uDzM3vZf43gCkUz_0
                refreshToken:
                    type: string
                    format: jwt
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2MzgxOTUyMDB9.uDzM3vZf43gCkUz_0
                role:
                    type: string
                    example: user

        ForgetPasswordOtpSendRequest:
            type: object
            properties:
                email:
                    type: string
                    format: email
                    example: user@mail.com
            required: [email]

        ForgetPasswordRequest:
            type: object
            properties:
                email:
                    type: string
                    format: email
                    example: user@mail.com
                emailVerificationCode:
                    type: string
                    example: '123456'
                newPassword:
                    type: string
                    format: password
                    example: newPassWord123
                confirmNewPassword:
                    type: string
                    format: password
                    example: newPassWord123
            required: [email, emailVerificationCode, newPassword, confirmNewPassword]

        UserResponse:
            type: object
            properties:
                id:
                    type: string
                    format: uuid
                    example: 5f9b3b3b9b0b7c0017e2b3a5
                email:
                    type: string
                    format: email
                    example: user@mail.com
                firstName:
                    type: string
                    example: John
                lastName:
                    type: string
                    example: Doe

    responses:
        Conflict:
            description: Conflict error
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            message:
                                type: string
                                example: 'Conflict error occurred'

        Unauthorized:
            description: Unauthorized error
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            message:
                                type: string
                                example: 'Unauthorized error occurred'

        NotFound:
            description: Not found error
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            message:
                                type: string
                                example: 'Resource not found'

        InternalServerError:
            description: Internal server error
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            message:
                                type: string
                                example: 'Internal server error occurred'

        SellerInfoAdded:
            type: object
            properties:
                id:
                    type: string
                    example: '12345'
                email:
                    type: string
                    example: 'seller@example.com'
                fullName:
                    type: string
                    example: 'John Doe'
                role:
                    type: string
                    example: 'seller'
                phone:
                    type: string
                    example: '123-456-7890'
                isVerified:
                    type: boolean
                    example: true
                message:
                    type: string
                    example: 'Seller information created successfully.'
        BuyerInfoAdded:
            type: object
            properties:
                statusCode:
                    type: integer
                    example: 201
                success:
                    type: boolean
                    example: true
                message:
                    type: string
                    example: 'Buyer account created successfully'
                data:
                    type: object
                    properties:
                        id:
                            type: string
                            format: uuid
                            example: '99abb7da-8ca5-4d4a-a55c-a396f22db932'
                        email:
                            type: string
                            format: email
                            example: 'user@mail.com'
                        phone:
                            type: string
                            example: '01712345678'
                        role:
                            type: string
                            example: 'buyer'
                        password:
                            type: string
                            example: '$2b$10$Ky53AyH/xlzeqynRty/xkOEuM7jZkE74DjscK3FfSxh7T2QslZxJG'
                        fullName:
                            type: string
                            example: 'John Doe'
                        profileImage:
                            type: string
                            nullable: true
                            example: null
                        isVerified:
                            type: boolean
                            example: true
                        createdAt:
                            type: string
                            format: date-time
                            example: '2024-10-30T01:56:38.827Z'
                        updatedAt:
                            type: string
                            format: date-time
                            example: '2024-10-30T01:56:38.827Z'
                        emailVerificationCode:
                            type: string
                            nullable: true
                            example: null
                        emailVerificationExpiresAt:
                            type: string
                            format: date-time
                            nullable: true
                            example: null
                        refreshToken:
                            type: array
                        items:
                            type: string
                            example: []

        RoleIsNotSeller:
            description: Validation error - User role is not seller
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            error:
                                type: string
                                example: 'VALIDATION_ERROR'
                            status:
                                type: integer
                                example: 422
                            message:
                                type: string
                                example: 'user role is not seller!'
        RoleIsNotBuyer:
            description: Validation error - User role is not buyer
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            error:
                                type: string
                                example: 'VALIDATION_ERROR'
                            status:
                                type: integer
                                example: 422
                            message:
                                type: string
                                example: 'user role is not buyer!'

        UserIsNotVerified:
            description: Unauthorized - User is not verified
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            error:
                                type: string
                                example: 'UNAUTHORIZED'
                            status:
                                type: integer
                                example: 401
                            message:
                                type: string
                                example: "verification Failed, user isn't verified"
